[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "pypsgemu"
dynamic = ["version"]
description = "AY-3-8910 PSG Emulator - Complete software emulation of the AY-3-8910 sound chip"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Siska-Tech", email = "siska-tech@example.com"},
]
maintainers = [
    {name = "Siska-Tech", email = "siska-tech@example.com"},
]
keywords = ["ay-3-8910", "psg", "emulator", "sound", "audio", "chip", "retro", "gaming"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Emulators",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.19.0",
    "matplotlib>=3.3.0",
    "sounddevice>=0.4.0",
    "psutil>=5.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.10.0",
    "black>=21.0.0",
    "flake8>=3.8.0",
    "mypy>=0.800",
    "pre-commit>=2.15.0",
]
docs = [
    "sphinx>=3.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "myst-parser>=0.15.0",
]
test = [
    "pytest>=6.0.0",
    "pytest-cov>=2.10.0",
    "pytest-xdist>=2.0.0",
]
gui = [
    # tkinter is usually included with Python, but some Linux distributions require separate installation
]

[project.urls]
Homepage = "https://github.com/siska-tech/pypsgemu"
Documentation = "https://github.com/siska-tech/pypsgemu/blob/main/README.md"
Repository = "https://github.com/siska-tech/pypsgemu.git"
"Bug Tracker" = "https://github.com/siska-tech/pypsgemu/issues"
Changelog = "https://github.com/siska-tech/pypsgemu/blob/main/CHANGELOG.md"

[project.scripts]
pypsgemu-demo = "pypsgemu.cli:demo_main"
pypsgemu-debug = "pypsgemu.cli:debug_main"
pypsgemu-test = "pypsgemu.cli:test_main"

[project.gui-scripts]
pypsgemu-gui = "pypsgemu.gui:main"

[tool.setuptools]
packages = ["pypsgemu"]
include-package-data = true

[tool.setuptools.package-data]
pypsgemu = ["data/*.json", "data/*.txt"]

[tool.setuptools_scm]
write_to = "pypsgemu/_version.py"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sounddevice.*",
    "matplotlib.*",
    "tkinter.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=pypsgemu",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["pypsgemu"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
    "pypsgemu/_version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration
[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args

# Pre-commit hooks configuration (commented out due to TOML syntax compatibility)
# Note: This section requires proper TOML array of tables syntax
# [tool.pre-commit]
# repos = [...]
